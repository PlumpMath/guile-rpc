;;; Excercise the RPC message API.                  -*- Scheme -*-
;;;
;;; Guile-RPC --- A Scheme implementation of ONC RPC.
;;; Copyright (C) 2007  Ludovic Courtès <ludovic.courtes@laas.fr>
;;;
;;; Guile-RPC is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU Lesser General Public
;;; License as published by the Free Software Foundation; either
;;; version 2.1 of the License, or (at your option) any later version.
;;;
;;; Guile-RPC is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with Guile-RPC; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

(define-module (tests xdr)
  :use-module (r6rs bytevector)
  :use-module (r6rs i/o ports)
  :use-module (rpc xdr)
  :use-module (rpc xdr types)
  :use-module (rpc rpc)
  :use-module (rpc rpc types)
  :use-module (srfi srfi-34)
  :use-module (srfi srfi-64))


;;;
;;; RPC message type.
;;;

(define %error-raised (list 'error))

(test-begin "rpc-message")

(define bv (make-bytevector 1024))

(test-equal "call" #t
            (let ((msg (make-rpc-message #x9999 'CALL 70000 1 2)))
              (xdr-encode! bv 0 rpc-message msg)
              (equal? (xdr-decode rpc-message
                                  (open-bytevector-input-port bv))
                      msg)))

(test-equal "reply (accepted, success)" #x9999
            (let* ((xid #x9999)
                   (msg (make-rpc-message xid 'REPLY
                                          'MSG_ACCEPTED 'SUCCESS)))
              (xdr-encode! bv 0 rpc-message msg)
              (assert-accepted-reply
               (xdr-decode rpc-message (open-bytevector-input-port bv))
               xid)))

(test-eq    "reply (accepted, mismatch)" %error-raised
            (let ((msg (make-rpc-message #x99 'REPLY
                                         'MSG_ACCEPTED 'PROG_MISMATCH
                                         2 3)))
              (xdr-encode! bv 0 rpc-message msg)
              (guard (c ((rpc-program-mismatch-error? c)
                         (and
                          (equal? (list
                                   (rpc-program-mismatch-error:low-version c)
                                   (rpc-program-mismatch-error:high-version c))
                                  '(2 3))
                          %error-raised)))
                (assert-accepted-reply
                 (xdr-decode rpc-message (open-bytevector-input-port bv))
                 #t))))

(test-eq    "reply (accepted, program unavailable)" %error-raised
            (let ((msg (make-rpc-message #x99 'REPLY
                                         'MSG_ACCEPTED 'PROG_UNAVAIL)))
              (xdr-encode! bv 0 rpc-message msg)
              (guard (c ((rpc-program-unavailable-error? c) %error-raised))
                (assert-accepted-reply
                 (xdr-decode rpc-message (open-bytevector-input-port bv))
                 #t))))

(test-eq    "reply (denied, mismatch)" %error-raised
            (let ((msg (make-rpc-message #x99 'REPLY
                                         'MSG_DENIED 'RPC_MISMATCH
                                         2 3)))
              (xdr-encode! bv 0 rpc-message msg)
              (guard (c ((rpc-program-mismatch-error? c)
                         (and
                          (equal? (list
                                   (rpc-program-mismatch-error:low-version c)
                                   (rpc-program-mismatch-error:high-version c))
                                  '(2 3))
                          %error-raised)))
                (assert-accepted-reply
                 (xdr-decode rpc-message (open-bytevector-input-port bv))
                 #t))))

(test-end "rpc-message")


(exit (= (test-runner-fail-count (test-runner-current)) 0))


;;; arch-tag: a294fa9c-8df4-48bc-9cdc-99785aa03980
