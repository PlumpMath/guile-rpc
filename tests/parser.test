;;; Excercise the XDR language parser.                -*- Scheme -*-
;;;
;;; GNU Guile-RPC --- A Scheme implementation of ONC RPC.
;;; Copyright (C) 2008  Free Software Foundation, Inc.
;;;
;;; This file is part of GNU Guile-RPC.
;;;
;;; GNU Guile-RPC is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU Lesser General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Guile-RPC is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
;;; General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (tests parser)
  :use-module (rpc compiler parser)
  :use-module (srfi srfi-13)
  :use-module (srfi srfi-64))

(define (xdr-text . body)
  (open-input-string (string-join body (string #\newline))))


;;;
;;; Parser.
;;;

(test-begin "xdr-parser")

(test-equal "constants"
            '((define-constant "oct"  8)
              (define-constant "dec"  0)
              (define-constant "dec" 10)
              (define-constant "hex" 16))

            (xdr-language->sexp
             (xdr-text "const oct =  010;"
                       "const dec =    0;"
                       "const dec =   10;"
                       "const hex = 0x10;")))

(test-equal "simple definitions"
            '((define-type "foo_t" "int")
              (define-type "blurps" (enum ("x" 2) ("z" 3)))
              (define-type "chbouib_t"
                (fixed-length-array "int" 4))
              (define-constant "magic" 42))

            (xdr-language->sexp
             (xdr-text "/* This is a comment.  */"
                       "/* This is a" (string #\newline)
                       "   multi-line comment.  */"
                       "typedef int foo_t;"
                       "enum blurps { x = 2, z = 3 };"
                       "typedef int chbouib_t[4];"
                       "const magic = 42;")))

(test-equal "struct definitions"
            '((define-type "foo"
                (struct ("i" "int")
                        ("u" "unsigned int")
                        ("f" "float")))
              (define-type "bar"
                (struct ("i" "int")
                        ("e" (enum ("a" 2) ("b" 3)))
                        ("s" (struct ("x" "int") ("y" "double"))))))

            (xdr-language->sexp
             (xdr-text "struct foo { int i; unsigned int u; float f; };"
                       "struct bar { int i; enum { a = 2, b = 3 } e; "
                       "             struct { int x; double y; } s; };")))

(test-equal "union definitions"
            '((define-type "no_default"
                (union (case ("choice" "unsigned int")
                         ((0 1) "void")
                         ((2)   ("q" "quadruple")))))

              (define-type "chbouib"
                (union (case ("choose" "int")
                         ((0)   "void")
                         ((1 2) ("u" "unsigned int"))
                         ((3)   ("e" (enum ("a" 10) ("b" 16) ("c" 8))))
                         ((4)   ("s" (struct ("x" "int") ("y" "double"))))
                         (else  ("h" "unsigned hyper"))))))

            (xdr-language->sexp
             (xdr-text "union no_default"
                       "  switch (unsigned int choice) {"
                       "    case 0: case 1:"
                       "      void;"
                       "    case 2:"
                       "      quadruple q;"
                       "  };"

                       "union chbouib"
                       "  switch (int choose) {"
                       "    case 0:"
                       "      void;"
                       "    case 1:"
                       "    case 2:"
                       "      unsigned int u;"
                       "    case 3:"
                       "      enum { a = 10, b = 0x10, c = 010 } e;"
                       "    case 4:"
                       "      struct { int x; double y; } s;"
                       "    default:"
                       "      unsigned hyper h;"
                       "  };")))

(test-equal "optional data unions"
            '((define-type "optional_int"
                (union (case ("opted" "bool")
                         ((TRUE)  ("value" "foo_t"))
                         ((FALSE) "void"))))

              (define-type "s"
                (struct ("x" "int")
                        ("y" (union (case ("opted" "bool")
                                      ((TRUE)  ("value" "int"))
                                      ((FALSE) "void")))))))

            (xdr-language->sexp
             (xdr-text "typedef foo_t *optional_int;"
                       "struct s { int x; int *y; };")))

(test-equal "fixed-length arrays"
            '((define-type "int_array"
                (fixed-length-array "int" 3))
              (define-type "struct_array"
                (fixed-length-array (struct ("x" "int") ("y" "double"))
                                    16)))

            (xdr-language->sexp
             (xdr-text "typedef int int_array[3];"
                       "typedef struct { int x; double y; }"
                       "        struct_array[16];")))

(test-equal "variable-length arrays"
            '((define-type "enum_array"
                (variable-length-array (enum ("a" 1) ("b" 2))
                                       8))
              (define-type "union_array_nolimit"
                (variable-length-array (union (case ("x" "int")
                                                ((0)   ("foo"     "bool"))
                                                ((1 2) ("bar"     "double"))
                                                (else  ("chbouib" "hyper"))))
                                       #f)))

            (xdr-language->sexp
             (xdr-text "typedef enum { a = 1, b = 2 } enum_array<010>;"
                       "typedef union switch (int x) {"
                       "          case 0: bool foo;"
                       "          case 1: case 2: double bar;"
                       "          default: hyper chbouib;"
                       "        } union_array_nolimit<>;")))

(test-equal "strings"
            '((define-type "foo"
                (string 256))
              (define-type "bar"
                (string #f))
              (define-type "chbouib"
                (struct ("x" "int")
                        ("y" (string 10))
                        ("z" (string #f)))))

            (xdr-language->sexp
             (xdr-text "typedef string foo<0x100>;"
                       "typedef string bar<>;"
                       "struct chbouib { int x; string y<10>; "
                       "                 string z<>; };")))

(test-equal "opaque arrays"
            '((define-type "foo"
                (fixed-length-array "opaque" 8))
              (define-type "bar"
                (variable-length-array "opaque" 10))
              (define-type "chbouib"
                (variable-length-array "opaque" #f))
              (define-type "blurps"
                (struct ("x" "int")
                        ("y" (variable-length-array "opaque" 16)))))

            (xdr-language->sexp
             (xdr-text "typedef opaque foo[010];"
                       "typedef opaque bar<10>;"
                       "typedef opaque chbouib<>;"
                       "struct blurps { int x; opaque y<0x10>; };")))


(test-end "xdr-parser")


(exit (= (test-runner-fail-count (test-runner-current)) 0))

